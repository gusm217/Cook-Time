{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/AppRecipes/sd-011-project-recipes-app/src/Context_Configs/Provider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport twelveItems from '../Helpers/twelveItems';\nimport Context from './Context'; // Aux vars\n\nconst firstLetter = 'first-letter'; // endpoint de comidas\n\nconst URL_FOOD_INGREDIENTS = 'https://www.themealdb.com/api/json/v1/1/filter.php?i=';\nconst URL_FOOD_NAME = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\nconst URL_FOOD_FIRST_LETTER = 'https://www.themealdb.com/api/json/v1/1/search.php?f='; // ====================\n// endpoint de bebidas\n\nconst URL_DRINK_INGREDIENTS = 'https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=';\nconst URL_DRINK_NAME = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\nconst URL_DRINK_FIRST_LETTER = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?f='; // ====================\n\nfunction Provider({\n  children\n}) {\n  const [dataFood, setDataFoods] = useState([]);\n  const [dataDrinks, setDataDrinks] = useState([]);\n  const [APIerror, setError] = useState(null);\n  const [requestFoodParams, setRequestFoodParams] = useState({\n    searchInput: '',\n    searchMethod: ''\n  });\n  const [requestDrinksParams, setRequestDrinksParams] = useState({\n    searchInput: '',\n    searchMethod: ''\n  });\n  useEffect(() => {\n    const {\n      searchInput,\n      searchMethod\n    } = requestFoodParams;\n\n    const fetchFoodData = async () => {\n      let response;\n\n      if (searchMethod === firstLetter && searchInput.length !== 1) {\n        // eslint-disable-next-line no-alert\n        alert('Sua busca deve conter somente 1 (um) caracter');\n        return;\n      }\n\n      try {\n        if (searchMethod === 'ingredients') {\n          response = await fetch(`${URL_FOOD_INGREDIENTS}${searchInput}`);\n        }\n\n        if (searchMethod === 'name') {\n          response = await fetch(`${URL_FOOD_NAME}${searchInput}`);\n        }\n\n        if (searchMethod === firstLetter) {\n          response = await fetch(`${URL_FOOD_FIRST_LETTER}${searchInput}`);\n        }\n\n        if (searchMethod === '') {\n          response = await fetch(URL_FOOD_NAME);\n        }\n\n        const result = await response.json();\n        setDataFoods(twelveItems(result));\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchFoodData();\n  }, [requestFoodParams]);\n  useEffect(() => {\n    const {\n      searchInput,\n      searchMethod\n    } = requestDrinksParams;\n\n    const fetchDrinkData = async () => {\n      let response;\n\n      if (searchMethod === firstLetter && searchInput.length !== 1) {\n        // eslint-disable-next-line no-alert\n        alert('Sua busca deve conter somente 1 (um) caracter');\n        return;\n      }\n\n      try {\n        if (searchMethod === 'ingredients') {\n          response = await fetch(`${URL_DRINK_INGREDIENTS}${searchInput}`);\n        }\n\n        if (searchMethod === 'name') {\n          response = await fetch(`${URL_DRINK_NAME}${searchInput}`);\n        }\n\n        if (searchMethod === firstLetter) {\n          response = await fetch(`${URL_DRINK_FIRST_LETTER}${searchInput}`);\n        }\n\n        if (searchMethod === '') {\n          response = await fetch(URL_DRINK_NAME);\n        }\n\n        const result = await response.json();\n        setDataDrinks(twelveItems(result));\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    fetchDrinkData();\n  }, [requestDrinksParams]);\n  const context = {\n    dataFood,\n    setRequestFoodParams,\n    setRequestDrinksParams,\n    dataDrinks,\n    APIerror\n  };\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default Provider;\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"sources":["/home/vinicius/Desktop/AppRecipes/sd-011-project-recipes-app/src/Context_Configs/Provider.js"],"names":["React","useState","useEffect","PropTypes","twelveItems","Context","firstLetter","URL_FOOD_INGREDIENTS","URL_FOOD_NAME","URL_FOOD_FIRST_LETTER","URL_DRINK_INGREDIENTS","URL_DRINK_NAME","URL_DRINK_FIRST_LETTER","Provider","children","dataFood","setDataFoods","dataDrinks","setDataDrinks","APIerror","setError","requestFoodParams","setRequestFoodParams","searchInput","searchMethod","requestDrinksParams","setRequestDrinksParams","fetchFoodData","response","length","alert","fetch","result","json","error","fetchDrinkData","context","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport twelveItems from '../Helpers/twelveItems';\nimport Context from './Context';\n\n// Aux vars\nconst firstLetter = 'first-letter';\n\n// endpoint de comidas\nconst URL_FOOD_INGREDIENTS = 'https://www.themealdb.com/api/json/v1/1/filter.php?i=';\nconst URL_FOOD_NAME = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\nconst URL_FOOD_FIRST_LETTER = 'https://www.themealdb.com/api/json/v1/1/search.php?f=';\n// ====================\n\n// endpoint de bebidas\nconst URL_DRINK_INGREDIENTS = 'https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=';\nconst URL_DRINK_NAME = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\nconst URL_DRINK_FIRST_LETTER = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?f=';\n// ====================\n\nfunction Provider({ children }) {\n  const [dataFood, setDataFoods] = useState([]);\n  const [dataDrinks, setDataDrinks] = useState([]);\n  const [APIerror, setError] = useState(null);\n  const [requestFoodParams, setRequestFoodParams] = useState({\n    searchInput: '', searchMethod: '' });\n  const [requestDrinksParams, setRequestDrinksParams] = useState({\n    searchInput: '', searchMethod: '' });\n\n  useEffect(() => {\n    const { searchInput, searchMethod } = requestFoodParams;\n    const fetchFoodData = async () => {\n      let response;\n      if (searchMethod === firstLetter && searchInput.length !== 1) {\n        // eslint-disable-next-line no-alert\n        alert('Sua busca deve conter somente 1 (um) caracter');\n        return;\n      }\n      try {\n        if (searchMethod === 'ingredients') {\n          response = await fetch(`${URL_FOOD_INGREDIENTS}${searchInput}`);\n        }\n        if (searchMethod === 'name') {\n          response = await fetch(`${URL_FOOD_NAME}${searchInput}`);\n        }\n        if (searchMethod === firstLetter) {\n          response = await fetch(`${URL_FOOD_FIRST_LETTER}${searchInput}`);\n        }\n        if (searchMethod === '') {\n          response = await fetch(URL_FOOD_NAME);\n        }\n        const result = await response.json();\n        setDataFoods(twelveItems(result));\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchFoodData();\n  }, [requestFoodParams]);\n\n  useEffect(() => {\n    const { searchInput, searchMethod } = requestDrinksParams;\n    const fetchDrinkData = async () => {\n      let response;\n      if (searchMethod === firstLetter && searchInput.length !== 1) {\n        // eslint-disable-next-line no-alert\n        alert('Sua busca deve conter somente 1 (um) caracter');\n        return;\n      }\n      try {\n        if (searchMethod === 'ingredients') {\n          response = await fetch(`${URL_DRINK_INGREDIENTS}${searchInput}`);\n        }\n        if (searchMethod === 'name') {\n          response = await fetch(`${URL_DRINK_NAME}${searchInput}`);\n        }\n        if (searchMethod === firstLetter) {\n          response = await fetch(`${URL_DRINK_FIRST_LETTER}${searchInput}`);\n        }\n        if (searchMethod === '') {\n          response = await fetch(URL_DRINK_NAME);\n        }\n        const result = await response.json();\n        setDataDrinks(twelveItems(result));\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchDrinkData();\n  }, [requestDrinksParams]);\n\n  const context = {\n    dataFood,\n    setRequestFoodParams,\n    setRequestDrinksParams,\n    dataDrinks,\n    APIerror,\n  };\n\n  return (\n    <Context.Provider value={ context }>\n      { children }\n    </Context.Provider>\n  );\n}\n\nexport default Provider;\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}